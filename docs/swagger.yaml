basePath: /v1
definitions:
  models.Area:
    properties:
      id:
        type: integer
      manager:
        type: string
      name:
        type: string
    type: object
  models.Gateway:
    properties:
      area_id:
        type: string
      connect_state:
        type: string
      gateway_id:
        type: string
      id:
        type: integer
      name:
        type: string
      software_version:
        type: string
      uhfs:
        items:
          $ref: '#/definitions/models.UHF'
        type: array
    type: object
  models.GatewayLog:
    properties:
      gateway_id:
        type: string
      id:
        type: integer
      log_time:
        type: string
      state_type:
        type: string
      state_value:
        type: string
    type: object
  models.OperationLog:
    properties:
      content:
        description: corresponding statetype
        type: string
      gateway_id:
        type: string
      id:
        type: integer
    type: object
  models.PackageAccess:
    properties:
      area_id:
        type: string
      group:
        type: string
      id:
        type: integer
      package_id:
        type: string
      random:
        type: string
    type: object
  models.SwagCreateArea:
    properties:
      manager:
        type: string
      name:
        type: string
    type: object
  models.SwagUpateGateway:
    properties:
      areaId:
        type: string
      gatewayId:
        type: string
      name:
        type: string
    type: object
  models.SwagUpdateArea:
    properties:
      id:
        type: integer
      manager:
        type: string
      name:
        type: string
    type: object
  models.UHF:
    properties:
      active_state:
        type: string
      area_id:
        type: string
      connect_state:
        type: string
      description:
        type: string
      gateway_id:
        type: string
      id:
        type: integer
      uhf_address:
        type: string
      uhf_serial_number:
        type: string
    type: object
  models.UHFStatusLog:
    properties:
      gateway_id:
        type: string
      id:
        type: integer
      state_type:
        description: ConnectState, DoorState, LockState
        type: string
      state_value:
        description: corresponding statetype
        type: string
      uhf_address:
        type: string
    type: object
  models.UserAccess:
    properties:
      area_id:
        type: string
      group:
        type: string
      id:
        type: integer
      random:
        type: string
      user_id:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      errorMsg:
        type: string
      msg:
        type: string
      statusCode:
        type: integer
    type: object
host: http://iot.hcmue.space:8079
info:
  contact:
    name: Mr. Khai
  description: This is API document for UAMS backend server
  title: Backend API
  version: "1.0"
paths:
  /v1/area:
    delete:
      consumes:
      - application/json
      description: Delete area using "id" field
      parameters:
      - description: Area ID
        in: body
        name: data
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              id:
                type: integer
            type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Delete Area By ID
    patch:
      consumes:
      - application/json
      description: Update area, must have "id" field
      parameters:
      - description: Fields need to update a area
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.SwagUpdateArea'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update Area By ID
    post:
      consumes:
      - application/json
      description: Create area
      parameters:
      - description: Fields need to create a area
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.SwagCreateArea'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Area'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Create Area
  /v1/area/{id}:
    get:
      description: find area info by area id
      parameters:
      - description: Area ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Area'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Area By ID
  /v1/areas:
    get:
      description: find all areas info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.Area'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find All Area
  /v1/gateway:
    delete:
      consumes:
      - application/json
      description: Delete gateway using "id" field. Send deleted info to MQTT broker
      parameters:
      - description: Gateway ID
        in: body
        name: data
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              gateway_id:
                type: string
            type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Delete Gateway By Gateway ID
    patch:
      consumes:
      - application/json
      description: Update gateway, must have "gateway_id" field. Send updated info
        to MQTT broker
      parameters:
      - description: Fields need to update a gateway
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.SwagUpateGateway'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update Gateway By Gateway ID
  /v1/gateway/{id}:
    get:
      description: find gateway and uhf info by id
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Gateway'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Gateway By ID
  /v1/gateway/gateway_id/{gateway_id}:
    get:
      description: find gateway and uhf info by gateway_id
      parameters:
      - description: gateway_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Gateway'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Gateway By Gateway ID
  /v1/gateway_logs:
    get:
      description: find all gateway logs info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.GatewayLog'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find All GatewayLog
  /v1/gateway_logs/{id}:
    get:
      description: find gateway log info by id
      parameters:
      - description: GatewayLog ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GatewayLog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find GatewayLog By ID
  /v1/gateway_logs/gateway_id/{gateway_id}/period/{from}/{to}:
    get:
      description: find Gateway logs by period of time
      parameters:
      - description: GatewayLog ID
        in: path
        name: id
        required: true
        type: string
      - description: From Unix time
        in: path
        name: from
        required: true
        type: string
      - description: To Unix time
        in: path
        name: to
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GatewayLog'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Gateway logs by period of time
  /v1/gateway_logs/gateway_id/{id}:
    get:
      description: find gateway log info by Gateway id
      parameters:
      - description: GatewayLog ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GatewayLog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find GatewayLog By Gateway ID
  /v1/gateway_logs/period/{from}/{to}:
    get:
      description: find Gateway logs by period of time
      parameters:
      - description: GatewayLog ID
        in: path
        name: id
        required: true
        type: string
      - description: From Unix time
        in: path
        name: from
        required: true
        type: string
      - description: To Unix time
        in: path
        name: to
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GatewayLog'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Gateway logs by period of time
  /v1/gateways:
    get:
      description: find all gateways info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.Gateway'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find All Gateway
  /v1/operation_logs:
    get:
      description: find all operation logs info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.OperationLog'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find All OperationLog
  /v1/operation_logs/{id}:
    get:
      description: find operation log info by id
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OperationLog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Operation By ID
  /v1/operation_logs/gateway_id/{gateway_id}:
    get:
      description: find operation log info by gateway_id
      parameters:
      - description: GatewayLog ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OperationLog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Operation By GatewayID
  /v1/operation_logs/gateway_id/{gateway_id}/period/{from}/{to}:
    get:
      description: find operation logs by period of time
      parameters:
      - description: Gateway ID
        in: path
        name: id
        required: true
        type: string
      - description: From Unix time
        in: path
        name: from
        required: true
        type: string
      - description: To Unix time
        in: path
        name: to
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.OperationLog'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find operation logs by period of time
  /v1/operation_logs/period/{from}/{to}:
    get:
      description: find Operation logs by period of time
      parameters:
      - description: Gateway ID
        in: path
        name: id
        required: true
        type: string
      - description: From Unix time
        in: path
        name: from
        required: true
        type: string
      - description: To Unix time
        in: path
        name: to
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.OperationLog'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Operation logs by period of time
  /v1/package_accesses:
    get:
      description: find all package access log
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.PackageAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Package Access log
  /v1/package_accesses/area_id/{area_id}:
    get:
      description: find all package access log by  and AreaID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.PackageAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Package Access log by AreaID
  /v1/package_accesses/area_id/{area_id}/period/{from}/{to}:
    get:
      description: find all package access log by AreaID and TimeRange
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.PackageAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Package Access log by AreaID and TimeRange
  /v1/package_accesses/package_id/{id}:
    get:
      description: find all package access log by Package ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.PackageAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Package Access log by Package ID
  /v1/package_accesses/package_id/{id}/area_id/{area_id}:
    get:
      description: find all package access log by Package ID and AreaID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.PackageAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Package Access log by Package ID and AreaID
  /v1/package_accesses/package_id/{id}/area_id/{area_id}/period/{from}/{to}:
    get:
      description: find all package access log by Package ID and AreaID and TimeRange
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.PackageAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Package Access log by Package ID and AreaID and TimeRange
  /v1/package_accesses/package_id/{id}/period/{from}/{to}:
    get:
      description: find all package access log by Package ID and TimeRange
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.PackageAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Package Access log by Package ID and TimeRange
  /v1/package_accesses/period/{from}/{to}:
    get:
      description: find all package access log by TimeRange
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.PackageAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find Package Access log by TimeRange
  /v1/uhf:
    delete:
      consumes:
      - application/json
      description: Delete UHF using "id" field. Send deleted info to MQTT broker
      parameters:
      - description: UHF Delete payload
        in: body
        name: data
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              id:
                type: integer
            type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Delete UHF By ID
    patch:
      consumes:
      - application/json
      description: Update UHF, must have "gatewayId" and "UHFAddress" field. Send
        updated info to MQTT broker
      parameters:
      - description: Fields need to update a UHF
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UHF'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update UHF By UHF Address and GatewayID
  /v1/uhf/{id}:
    get:
      description: find UHF info by UHF id
      parameters:
      - description: UHF ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UHF'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find UHF By ID
  /v1/uhf_logs:
    get:
      description: find all UHF Status logs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UHFStatusLog'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find All UHF Status logs
  /v1/uhf_logs/{id}:
    get:
      description: find all UHF Status logs by ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UHFStatusLog'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find All UHF Status logs by ID
  /v1/uhf_logs/gateway_id/{gateway_id}/uhf_address/{uhf_address}:
    get:
      description: find all UHF Status logs by Gateway ID and UHF Address
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UHFStatusLog'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find All UHF Status logs by Gateway ID and UHF Address
  /v1/uhf_logs/gateway_id/{gateway_id}/uhf_address/{uhf_address}/period/{from}/{to}:
    get:
      description: find all UHF Status logs by GatewayID, AddressID and TimeRange
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UHFStatusLog'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find All UHF Status logs by GatewayID, AddressID and TimeRange
  /v1/uhf_logs/period/{from}/{to}:
    get:
      description: find all UHF Status logs by Timerange
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UHFStatusLog'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find All UHF Status logs by Timerange
  /v1/uhfs:
    get:
      description: find all UHF info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UHF'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find All UHF
  /v1/user_accesses:
    get:
      description: find all user access log
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UserAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find User Access log
  /v1/user_accesses/area_id/{area_id}:
    get:
      description: find all user access log by Area Id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UserAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find User Access log by Area Id
  /v1/user_accesses/area_id/{area_id}/period/{from}/{to}:
    get:
      description: find all user access log by Area Id and TimeRange
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UserAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find User Access log by Area Id and TimeRange
  /v1/user_accesses/period/{from}/{to}:
    get:
      description: find all user access log by TimeRange
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UserAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find User Access log by TimeRange
  /v1/user_accesses/user_id/{id}:
    get:
      description: find all user access log by user id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UserAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find User Access log by User ID
  /v1/user_accesses/user_id/{id}/area_id/{area_id}:
    get:
      description: find all user access log by user id and Area Id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UserAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find User Access log by User ID and Area Id
  /v1/user_accesses/user_id/{id}/area_id/{area_id}/period/{from}/{to}:
    get:
      description: find all user access log by user id and Area Id and TimeRange
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UserAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find User Access log by User ID and Area Id and TimeRange
  /v1/user_accesses/user_id/{id}/period/{from}/{to}:
    get:
      description: find all user access log by user id and Time Range
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UserAccess'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Find User Access log by User ID and Time Range
swagger: "2.0"
